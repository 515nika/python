from PySide6.QtWidgets import QMainWindow, QMessageBox, QVBoxLayout, QPushButton, QLabel, QWidget, QGridLayout
from PySide6.QtCore import Qt
import random
from exceptions import ShipPlacementError, InvalidCoordinateError

class SeaBattleGame(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ú–æ—Ä—Å–∫–æ–π –±–æ–π")
        self.setGeometry(100, 100, 800, 600)
        
        self.player_board = [[0 for _ in range(10)] for _ in range(10)]
        self.computer_board = [[0 for _ in range(10)] for _ in range(10)]
        self.ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]  # –†–∞–∑–º–µ—Ä—ã –∫–æ—Ä–∞–±–ª–µ–π
        self.game_over = False  # –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        
        self.init_ui()
        self.place_ships(self.player_board)
        self.place_ships(self.computer_board)
    
    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout()
        central_widget.setLayout(layout)
        
        self.label = QLabel("–í–∞—à —Ö–æ–¥! –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –ø–æ–ª—é.")
        layout.addWidget(self.label)
        
        # –°–µ—Ç–∫–∞ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –ø–æ–ª–µ–π
        grid_layout = QGridLayout()
        layout.addLayout(grid_layout)
        
        # –õ–µ–≤–æ–µ –ø–æ–ª–µ (–∏–≥—Ä–æ–∫)
        self.player_grid = QGridLayout()
        grid_layout.addLayout(self.player_grid, 0, 0)
        
        # –ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ (–∫–æ–º–ø—å—é—Ç–µ—Ä)
        self.computer_grid = QGridLayout()
        grid_layout.addLayout(self.computer_grid, 0, 1)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∫–Ω–æ–ø–∫–∞–º–∏
        for i in range(10):
            for j in range(10):
                btn_player = QPushButton()
                btn_player.setFixedSize(30, 30)
                self.player_grid.addWidget(btn_player, i, j)
                
                btn_computer = QPushButton()
                btn_computer.setFixedSize(30, 30)
                btn_computer.clicked.connect(lambda _, x=i, y=j: self.player_turn(x, y))
                self.computer_grid.addWidget(btn_computer, i, j)
    
    def place_ships(self, board):
        for ship_size in self.ships:
            placed = False
            while not placed:
                try:
                    x, y = random.randint(0, 9), random.randint(0, 9)
                    horizontal = random.choice([True, False])
                    
                    if horizontal:
                        if y + ship_size > 10:
                            raise ShipPlacementError
                    else:
                        if x + ship_size > 10:
                            raise ShipPlacementError
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ä—è–¥–æ–º –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
                    for i in range(max(0, x-1), min(10, x + (ship_size if not horizontal else 1) + 1)):
                        for j in range(max(0, y-1), min(10, y + (ship_size if horizontal else 1) + 1)):
                            if board[i][j] == 1:
                                raise ShipPlacementError
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å
                    for k in range(ship_size):
                        if horizontal:
                            board[x][y + k] = 1
                        else:
                            board[x + k][y] = 1
                    
                    placed = True
                
                except ShipPlacementError:
                    continue
    
    def check_win(self, board):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏."""
        for row in board:
            if 1 in row:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–ª–µ—Ç–∫–∞ —Å –∫–æ—Ä–∞–±–ª—ë–º (1)
                return False
        return True  # –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã
    
    def end_game(self, player_won):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        self.game_over = True
        for i in range(10):
            for j in range(10):
                self.computer_grid.itemAtPosition(i, j).widget().setEnabled(False)
        
        if player_won:
            QMessageBox.information(self, "–ü–æ–±–µ–¥–∞!", "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
        else:
            QMessageBox.information(self, "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª. üò¢")
    
    def player_turn(self, x, y):
        if self.game_over:
            return
        
        try:
            if x < 0 or x > 9 or y < 0 or y > 9:
                raise InvalidCoordinateError
            
            if self.computer_board[x][y] == 1:  # –ü–æ–ø–∞–¥–∞–Ω–∏–µ
                self.computer_board[x][y] = 2
                self.computer_grid.itemAtPosition(x, y).widget().setText("üí•")
                self.computer_grid.itemAtPosition(x, y).widget().setStyleSheet("background-color: red")
                self.label.setText("–ü–æ–ø–∞–¥–∞–Ω–∏–µ! –°—Ç—Ä–µ–ª—è–π—Ç–µ –µ—â—ë.")
                
                if self.check_win(self.computer_board):
                    self.end_game(True)  # –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
            
            elif self.computer_board[x][y] == 0:  # –ü—Ä–æ–º–∞—Ö
                self.computer_board[x][y] = -1
                self.computer_grid.itemAtPosition(x, y).widget().setText("‚Ä¢")
                self.computer_grid.itemAtPosition(x, y).widget().setStyleSheet("background-color: blue")
                self.label.setText("–ü—Ä–æ–º–∞—Ö! –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.")
                self.computer_turn()
        
        except InvalidCoordinateError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
    
    def computer_turn(self):
        if self.game_over:
            return
        
        x, y = random.randint(0, 9), random.randint(0, 9)
        
        # –ö–æ–º–ø—å—é—Ç–µ—Ä —Å—Ç—Ä–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        while self.player_board[x][y] in (-1, 2):
            x, y = random.randint(0, 9), random.randint(0, 9)
        
        if self.player_board[x][y] == 1:  # –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            self.player_board[x][y] = 2
            self.player_grid.itemAtPosition(x, y).widget().setText("üí•")
            self.player_grid.itemAtPosition(x, y).widget().setStyleSheet("background-color: red")
            
            if self.check_win(self.player_board):
                self.end_game(False)  # –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª
        
        else:  # –ü—Ä–æ–º–∞—Ö
            self.player_board[x][y] = -1
            self.player_grid.itemAtPosition(x, y).widget().setText("‚Ä¢")
            self.player_grid.itemAtPosition(x, y).widget().setStyleSheet("background-color: blue")